#include "LogicSystem.h"
#include "HttpConnection.h"
#include "VerifyGrpcClient.h"
#include "MysqlMgr.h"
#include "RedisMgr.h"
#include "StatusGrpcClient.h"

LogicSystem::~LogicSystem()
{

}

bool LogicSystem::HandleGet(std::string path, std::shared_ptr<HttpConnection> connection)
{
	if (m_get_handlers.find(path) == m_get_handlers.end())
		return false;

	m_get_handlers[path](connection);	//调用处理
	return true;

}
bool LogicSystem::HandlePost(std::string path, std::shared_ptr<HttpConnection> connection)
{
	if (m_post_handlers.find(path) == m_post_handlers.end())
		return false;

	m_post_handlers[path](connection);	//调用处理
	return true;

}

void LogicSystem::RegGet(std::string url, HttpHandler handler)
{
	m_get_handlers.insert(std::make_pair(url, handler));
}
void LogicSystem::RegPost(std::string url, HttpHandler handler)
{
	m_post_handlers.insert(std::make_pair(url, handler));
}

LogicSystem::LogicSystem()
{
	RegGet("/get_test", [](std::shared_ptr<HttpConnection>connection) {
		beast::ostream(connection->m_response.body())<<"receive get_test req";
		int i = 0;
		for (auto& elem:connection->m_get_params)
		{
			i++;
			beast::ostream(connection->m_response.body()) << ",param " << i << "key is " << elem.first;
			beast::ostream(connection->m_response.body()) << ",param " << i << "value is " << elem.second;
		}

		}
	);

	RegPost("/get_varifycode", [](std::shared_ptr<HttpConnection>connection) {
		//获取请求报文
		auto body_str = boost::beast::buffers_to_string(connection->m_request.body().data());
		std::cout << "receive body is " << body_str << std::endl;
		connection->m_response.set(http::field::content_type, "text/json");
		//解析请求内容
		Json::Value root;
		Json::Reader reader;
		Json::Value src_root;
		bool parse_success = reader.parse(body_str, src_root);
		if (!parse_success)
		{
			std::cout << "Failed to parse JSON data!" << std::endl;
			root["error"] = ErrorCodes::Error_Json;
			std::string jsonstr = root.toStyledString();
			beast::ostream(connection->m_response.body()) << jsonstr;
			return true;
		}

		if (!src_root.isMember("email"))
		{
			std::cout << "Failed to parse JSON data!" << std::endl;
			root["error"] = ErrorCodes::Error_Json;
			std::string jsonstr = root.toStyledString();
			beast::ostream(connection->m_response.body()) << jsonstr;
			return true;
		}
		//取出客户端发送的邮箱，并调用gRPC向该邮箱发送验证码
		auto email = src_root["email"].asString();
		GetVerifyRsp rsp = VerifyGrpcClient::GetInstance()->GetVerifyCode(email);
		std::cout << "email is " << email << std::endl;
		root["error"] = rsp.error();
		root["email"] = src_root["email"];
		std::string jsonstr = root.toStyledString();//序列化
		beast::ostream(connection->m_response.body()) << jsonstr;
		return true;

		}
	);
	//注册
	RegPost("/user_register", [](std::shared_ptr<HttpConnection> connection){
		auto body_str = boost::beast::buffers_to_string(connection->m_request.body().data());
		std::cout << "receive body is " << body_str << std::endl;
		Json::Value root;
		Json::Reader reader;
		Json::Value src_root;
		//从body_str中解析内容到src_root
		bool parse_success = reader.parse(body_str, src_root);
		if (!parse_success)
		{
			std::cout << "Failed to prase JSON data!" << std::endl;
			root["error"] = ErrorCodes::Error_Json;
			std::string jsonstr = root.toStyledString();
			beast::ostream(connection->m_response.body()) << jsonstr;
			return true;
		}
		//解析成功，得到注册信息
		auto email = src_root["email"].asString();
		auto name = src_root["user"].asString();
		auto pwd = src_root["passwd"].asString();
		auto confirm = src_root["confirm"].asString();
		auto veriftcodeddd = src_root["verifycode"].asString();
		//匹配密码和确认密码是否一致
		if (pwd!=confirm)
		{
			//不一致则写回错误信息
			std::cout << "password err " << std::endl;
			root["error"] = ErrorCodes::PasswdErr;
			std::string jsonstr = root.toStyledString();
			beast::ostream(connection->m_response.body());
			return true;
		}

		//先查找redis中email对应的验证码是否合理
		std::string verify_code;	//存储从redis中取出的邮箱信息
		bool b_get_verify = RedisMgr::GetInstance()->Get(CODEPREFIX+src_root["email"].asString(), verify_code);
		if (!b_get_verify)
		{
			std::cout << " get verify code expired" << std::endl;
			root["error"] = ErrorCodes::VerifyExpired;
			std::string jsonstr = root.toStyledString();
			beast::ostream(connection->m_response.body()) << jsonstr;
			return true;
		}
		//验证码是否正确
		if (verify_code != src_root["verifycode"].asString())
		{
			std::cout << "verify code error" << std::endl;
			root["error"] = ErrorCodes::VerifyCodeErr;
			std::string jsonstr = root.toStyledString();
			beast::ostream(connection->m_response.body()) << jsonstr;
			return true;
		}

		//向数据库插入注册信息
		int uid = MysqlMgr::GetInstance()->RegUser(name, email, pwd);
		if (uid == 0||uid == -1)
		{
			std::cout << "user or email exist" << std::endl;
			root["error"] = ErrorCodes::UserExist;
			std::string jsonstr = root.toStyledString();
			beast::ostream(connection->m_response.body()) << jsonstr;
			return true;
		}

		//查找数据库判断用户是否存在
		root["error"] = 0;
		root["uid"] = uid;
		root["email"] = email;
		root["user"] = name;
		root["passwd"] = pwd;
		root["confirm"] = confirm;
		root["varifycode"] = src_root["varifycode"].asString();
		//json序列化
		std::string jsonstr = root.toStyledString();
		//写入connection响应体回给客户端
		beast::ostream(connection->m_response.body()) << jsonstr;
		return true;
		}
	);
	
	//重置密码
	RegPost("/reset_pwd", [](std::shared_ptr<HttpConnection>connection) {
		//获取请求报文
		auto body_str = boost::beast::buffers_to_string(connection->m_request.body().data());
		std::cout << "receive body is" << body_str << std::endl;
		connection->m_response.set(http::field::content_type, "text/json");	//设置响应头类型
		Json::Value root;
		Json::Reader reader;
		Json::Value src_root;
		bool prase_success = reader.parse(body_str, src_root);
		if (!prase_success)
		{
			std::cout << "Failed to parse JSON data!" << std::endl;
			root["error"] = ErrorCodes::Error_Json;
			std::string jsonstr = root.toStyledString();
			beast::ostream(connection->m_response.body()) << jsonstr;
			return true;
		}

		auto email = src_root["email"].asString();
		auto name = src_root["user"].asString();
		auto pwd = src_root["passwd"].asString();

		//查找redis中email是否过期以及是否正确
		std::string verify_code;
		bool b_get_verify = RedisMgr::GetInstance()->Get(CODEPREFIX+src_root["email"].asString(),verify_code);
		if (!b_get_verify)
		{
			std::cout << "Get verify code expired" << std::endl;
			root["error"] = ErrorCodes::VerifyExpired;
			std::string jsonstr = root.toStyledString();
			beast::ostream(connection->m_response.body()) << jsonstr;
			return true;
		}
		//	redis中验证码!=填写的验证码
		if (verify_code !=src_root["verifycode"].asString())
		{
			std::cout << "verify code error" << std::endl;
			root["error"] = ErrorCodes::VerifyCodeErr;
			std::string jsonstr = root.toStyledString();
			beast::ostream(connection->m_response.body()) << jsonstr;
			return true;
		}
		//查询数据库判断用户名和邮箱是否匹配
		bool email_valid = MysqlMgr::GetInstance()->CheckEmail(name, email);
		if (!email_valid)
		{
			std::cout << "user email not match " << std::endl;
			root["error"] = ErrorCodes::EmailNotMatch;
			std::string jsonstr = root.toStyledString();
			beast::ostream(connection->m_response.body()) << jsonstr;
			return true;
		}

		//更新密码
		bool b_up = MysqlMgr::GetInstance()->UpdatePwd(name, pwd);
		if (!b_up)
		{
			std::cout << "update pwd failed" << std::endl;
			root["error"] = ErrorCodes::PasswdUpFailed;
			std::string jsonstr = root.toStyledString();
			beast::ostream(connection->m_response.body()) << jsonstr;
			return true;
		}
		
		std::cout << "succeed to update password" << pwd << std::endl;
		//回包给客户端
		root["error"] = 0;
		root["email"] = email;
		root["user"] = name;
		root["verifycode"] = src_root["verifycode"].asString();
		std::string jsonstr = root.toStyledString();
		beast::ostream(connection->m_response.body()) << jsonstr;
		return true;

	});

	RegPost("/user_login", [](std::shared_ptr<HttpConnection>connection) {
		//获取请求报文
		auto body_str = boost::beast::buffers_to_string(connection->m_request.body().data());
		std::cout << "receive body is " << body_str << std::endl;
		connection->m_response.set(http::field::content_type, "text/json");

		Json::Value root;
		Json::Reader reader;
		Json::Value src_root;
		bool parse_success = reader.parse(body_str, src_root);
		if (!parse_success)
		{
			std::cout << "Failed to parse JSON data!" << std::endl;
			root["error"] = ErrorCodes::Error_Json;
			std::string jsonObj = root.toStyledString();
			beast::ostream(connection->m_response.body()) << jsonObj;
			return true;
		}

		auto email = src_root["email"].asString();
		auto pwd = src_root["passwd"].asString();
		UserInfo userInfo;

		//查询数据库判断用户名和密码是否匹配,（得到uid）
		bool pwd_valid = MysqlMgr::GetInstance()->CheckPwd(email, pwd,userInfo);
		if (!pwd_valid)
		{
			std::cout << " user pwd not match" << std::endl;
			root["error"] = ErrorCodes::PasswdInvalid;
			std::string jsonstr = root.toStyledString();
			beast::ostream(connection->m_response.body()) << jsonstr;
			return true;
		}

		//查询StatusServer找到合适的连接
		auto reply = StatusGrpcClient::GetInstance()->GetChatServer(userInfo.uid);
		if (reply.error()) {
			std::cout << " grpc get chat server failed, error is " << reply.error() << std::endl;
			root["error"] = ErrorCodes::RPCFailed;
			std::string jsonstr = root.toStyledString();
			beast::ostream(connection->m_response.body()) << jsonstr;
			return true;
		}
		
		//获取到合适的连接以后，设置回包给客户端的内容（token）
		std::cout << "succeed to load userinfo uid is " << userInfo.uid << std::endl;
		root["error"] = 0;
		root["email"] = email;
		root["uid"] = userInfo.uid;
		root["token"] = reply.token();
		root["host"] = reply.host();
		root["port"] = reply.port();
		std::cout << reply.token();
		std::string jsonstr = root.toStyledString();
		beast::ostream(connection->m_response.body()) << jsonstr;
		return true;


	});

}
